'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent, CardFooter } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Slider } from '@/components/ui/slider'
import { Battery, Coffee, Target, Palette, Zap, Moon, Users, ArrowRight, ArrowLeft, Check, Smile } from 'lucide-react'
import { supabase } from '@/lib/supabase'
import { toast } from 'react-hot-toast'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Progress } from "@/components/ui/progress"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { SectionHeader } from "@/components/ui/section-header";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"


interface MoodDimension {
  name: string
  label: string
  icon: React.ReactNode
  description: string
  color: string
}

const moodDimensions: MoodDimension[] = [
  { name: 'energy', label: '–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å', icon: <Battery className="w-6 h-6" />, description: '–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏', color: 'bg-yellow-500' },
  { name: 'happiness', label: '–°—á–∞—Å—Ç—å–µ', icon: <Zap className="w-6 h-6" />, description: '–û–±—â–µ–µ –æ—â—É—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è –∏ —Ä–∞–¥–æ—Å—Ç–∏', color: 'bg-green-500' },
  { name: 'calmness', label: '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', icon: <Coffee className="w-6 h-6" />, description: '–£—Ä–æ–≤–µ–Ω—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏—è', color: 'bg-blue-500' },
  { name: 'focus', label: '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è', icon: <Target className="w-6 h-6" />, description: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', color: 'bg-indigo-500' },
  { name: 'creativity', label: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', icon: <Palette className="w-6 h-6" />, description: '–£—Ä–æ–≤–µ–Ω—å —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è', color: 'bg-pink-500' },
  { name: 'sleep_quality', label: '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞', icon: <Moon className="w-6 h-6" />, description: '–ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞', color: 'bg-indigo-700' },
  { name: 'social_connection', label: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å', icon: <Users className="w-6 h-6" />, description: '–£—Ä–æ–≤–µ–Ω—å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', color: 'bg-teal-500' },
]

interface DetailedMoodAssessmentProps {
  onMoodSubmit: (mood: Record<string, number>, dietPreference: number) => void
}

export default function DetailedMoodAssessment({ onMoodSubmit }: DetailedMoodAssessmentProps) {
  const [moodValues, setMoodValues] = useState<Record<string, number>>(() =>
    Object.fromEntries(moodDimensions.map(dim => [dim.name, 5]))
  )
  const [dietPreference, setDietPreference] = useState(5) // 1-10: 1 - –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤–æ–µ, 10 - –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ–≥–∞–Ω—Å–∫–æ–µ
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showRecommendationDialog, setShowRecommendationDialog] = useState(false)
  const [isConnected, setIsConnected] = useState(true)
  const [currentDimension, setCurrentDimension] = useState(0)

  useEffect(() => {
    checkSupabaseConnection()
  }, [])

  const checkSupabaseConnection = async () => {
    try {
      const { data, error } = await supabase.from('mood_entries').select('count', { count: 'exact', head: true })
      setIsConnected(!error)
    } catch (error) {
      setIsConnected(false)
    }
  }

  const handleSliderChange = (name: string, value: number[]) => {
    setMoodValues(prev => ({ ...prev, [name]: value[0] }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    try {
      if (!isConnected) {
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      }

      const { data: { user } } = await supabase.auth.getUser()
      if (!user) {
        toast.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É')
        return
      }

      const moodEntry = {
        user_id: user.id,
        mood_data: moodValues,
        diet_preference: dietPreference,
        created_at: new Date().toISOString()
      }

      const { data, error } = await supabase
        .from('mood_entries')
        .insert(moodEntry)
        .select()

      if (error) {
        console.error('Supabase error:', error)
        throw new Error(error.message)
      }

      console.log('Mood entry saved:', data)
      onMoodSubmit(moodValues, dietPreference)
      setShowRecommendationDialog(true)
      toast.success('–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')

      if (typeof window !== 'undefined') {
        window.dispatchEvent(new Event('moodUpdated'))
      }

    } catch (error) {
      console.error('Error saving mood:', error)
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    } finally {
      setIsSubmitting(false)
    }
  }

  const nextDimension = () => {
    if (currentDimension < moodDimensions.length - 1) {
      setCurrentDimension(currentDimension + 1)
    } else {
      handleSubmit(new Event('submit') as React.FormEvent)
    }
  }

  const prevDimension = () => {
    if (currentDimension > 0) {
      setCurrentDimension(currentDimension - 1)
    }
  }

  const getEmoji = (value: number) => {
    if (value <= 3) return 'üòî'
    if (value <= 7) return 'üòê'
    return 'üòä'
  }

  return (
    <Card className="overflow-hidden bg-gradient-to-br from-purple-100 to-pink-100 dark:from-purple-900 dark:to-pink-900 shadow-xl">
      <SectionHeader
        title="–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        description="–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏"
        icon={<Smile className="w-6 h-6 text-primary" />}
      />
      <CardContent className="p-6">
        {!isConnected && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-4 p-2 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 rounded"
          >
            –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
          </motion.div>
        )}
        <form onSubmit={handleSubmit}>
          <AnimatePresence mode="wait">
            <motion.div
              key={currentDimension}
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.3 }}
              className="space-y-6"
            >
              {currentDimension === moodDimensions.length ? (
                <div>
                  <Label className="text-lg font-medium mb-2 block">–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏</Label>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –º–µ–∂–¥—É –∑–¥–æ—Ä–æ–≤—ã–º –∏ –≤–µ–≥–∞–Ω—Å–∫–∏–º –ø–∏—Ç–∞–Ω–∏–µ–º
                  </p>
                  <div className="relative pt-1 mb-6">
                    <Slider
                      min={1}
                      max={10}
                      step={1}
                      value={[dietPreference]}
                      onValueChange={(value) => setDietPreference(value[0])}
                      className="w-full"
                    />
                    <div className="mt-2 flex justify-between text-xs text-gray-600 dark:text-gray-400">
                      <span>–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</span>
                      <span>–í–µ–≥–∞–Ω—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</span>
                    </div>
                    <div className="mt-4 text-center">
                      <span className="text-sm font-medium">
                        {dietPreference <= 3 ? '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è' :
                         dietPreference <= 7 ? '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥' :
                         '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –≤–µ–≥–∞–Ω—Å–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è'}
                      </span>
                    </div>
                  </div>
                </div>
              ) : (
                moodDimensions.map((dim, index) => (
                  <div key={dim.name} className={index === currentDimension ? '' : 'hidden'}>
                    <Label htmlFor={dim.name} className="flex items-center text-lg font-medium mb-2 text-gray-700 dark:text-gray-200">
                      {dim.icon}
                      <span className="ml-2">{dim.label}</span>
                    </Label>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">{dim.description}</p>
                    <div className="relative pt-1 mb-6">
                      <Slider
                        id={dim.name}
                        min={1}
                        max={10}
                        step={1}
                        value={[moodValues[dim.name]]}
                        onValueChange={(value) => handleSliderChange(dim.name, value)}
                        className="w-full"
                        aria-label={`–û—Ü–µ–Ω–∫–∞ ${dim.label}`}
                        aria-valuemin={1}
                        aria-valuemax={10}
                        aria-valuenow={moodValues[dim.name]}
                      />
                      <div className="mt-2 flex justify-between text-xs text-gray-600 dark:text-gray-400">
                        <span>–ù–∏–∑–∫–∏–π</span>
                        <span>–í—ã—Å–æ–∫–∏–π</span>
                      </div>
                    </div>
                    <div className="flex justify-between items-center">
                      <motion.div
                        className="text-4xl"
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 0.5 }}
                      >
                        {getEmoji(moodValues[dim.name])}
                      </motion.div>
                      <div className="text-2xl font-bold">{moodValues[dim.name]}</div>
                      <Progress value={moodValues[dim.name] * 10} className={`w-2/3 ${dim.color}`} />
                    </div>
                  </div>
                ))
              )}
            </motion.div>
          </AnimatePresence>
        </form>
      </CardContent>
      <CardFooter className="flex justify-between p-6">
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button 
                onClick={prevDimension} 
                disabled={currentDimension === 0}
                variant="outline"
              >
                <ArrowLeft className="mr-2" /> –ù–∞–∑–∞–¥
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <div className="text-center">
          <span className="text-sm text-gray-500 dark:text-gray-400">
            {currentDimension + 1} –∏–∑ {moodDimensions.length + 1}
          </span>
          <Progress 
            value={((currentDimension + 1) / (moodDimensions.length + 1)) * 100} 
            className="w-32 mt-2"
          />
        </div>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button 
                onClick={currentDimension < moodDimensions.length ? nextDimension : handleSubmit}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white transition-all duration-300 transform hover:scale-105 shadow-lg"
                disabled={isSubmitting}
              >
                {currentDimension < moodDimensions.length ? (
                  <>–î–∞–ª–µ–µ <ArrowRight className="ml-2" /></>
                ) : (
                  <>{isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'} <Check className="ml-2" /></>
                )}
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>{currentDimension < moodDimensions.length ? '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'}</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </CardFooter>
      <Dialog open={showRecommendationDialog} onOpenChange={setShowRecommendationDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!</DialogTitle>
            <DialogDescription>
              –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
            </DialogDescription>
          </DialogHeader>
          <Button onClick={() => setShowRecommendationDialog(false)}>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Button>
        </DialogContent>
      </Dialog>
    </Card>
  )
}

